image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE: ${CI_REGISTRY}/aradhya24/cold-email-generator:${CI_COMMIT_SHA}
  AWS_USER: ubuntu
  LB_DNS: ${LB_DNS}

stages:
  - validate
  - build
  - deploy
  - monitor

validate:
  image: python:3.9-slim
  stage: validate
  script:
    - apt-get update && apt-get install -y python3-pip
    - pip install -r requirements.txt
    - python -c "import app.main" || echo "Validation failed but continuing"
  rules:
    - if: $SKIP_VALIDATE_BUILD == null

build:
  stage: build
  script: 
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY 
    - docker build --pull -t $DOCKER_IMAGE .
    - docker tag $DOCKER_IMAGE $CI_REGISTRY/aradhya24/cold-email-generator:latest
    - docker push $DOCKER_IMAGE 
    - docker push $CI_REGISTRY/aradhya24/cold-email-generator:latest
  rules:
    - if: $SKIP_VALIDATE_BUILD == null

deploy:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_VERIFY: ""
    DOCKER_CERT_PATH: ""
  before_script:
    - apk add --no-cache openssh-client curl python3 py3-pip
    - pip3 install awscli
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Debug SSH key format (print first few characters)
    - echo "First few characters of SSH key (for debugging format):" && echo "$SSH_PRIVATE_KEY" | head -c 10 | xxd -p
    # Try to detect and handle different key formats
    - |
      if echo "$SSH_PRIVATE_KEY" | grep -q "OPENSSH PRIVATE KEY"; then
        echo "OpenSSH format detected"
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      elif echo "$SSH_PRIVATE_KEY" | grep -q "BEGIN RSA PRIVATE KEY"; then
        echo "PEM format detected"
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      else
        echo "Unknown key format, trying base64 decode..."
        echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
      fi
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region us-east-1
  script:
    - |
      # Launch EC2 instance and get instance info
      echo "Launching EC2 instance..."
      INSTANCE_ID=$(aws ec2 run-instances \
        --image-id ami-0c7217cdde317cfec \
        --instance-type t2.micro \
        --key-name $EC2_KEY_NAME \
        --security-group-ids $EC2_SECURITY_GROUP \
        --subnet-id $EC2_SUBNET_ID \
        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=cold-email-instance}]" \
        --query 'Instances[0].InstanceId' \
        --output text)
      
      echo "Instance ID: $INSTANCE_ID"
      
      # Wait for instance to be running
      echo "Waiting for instance to be running..."
      aws ec2 wait instance-running --instance-ids $INSTANCE_ID
      
      # Get public IP with retries
      echo "Getting instance public IP..."
      for i in {1..5}; do
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        if [ ! -z "$PUBLIC_IP" ] && [ "$PUBLIC_IP" != "None" ]; then
          echo "Got public IP: $PUBLIC_IP"
          break
        fi
        
        echo "Attempt $i: No public IP yet, waiting..."
        sleep 10
      done
      
      if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "None" ]; then
        echo "Failed to get public IP after 5 attempts"
        exit 1
      fi
      
      # Create lb_dns.env file
      echo "Creating lb_dns.env file..."
      echo "LB_DNS=$PUBLIC_IP" > lb_dns.env
      cat lb_dns.env
      
      # Wait for SSH to be available
      echo "Waiting for SSH to become available..."
      for i in {1..5}; do
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$PUBLIC_IP "echo 'SSH connection successful'"; then
          echo "SSH connection established"
          break
        fi
        echo "Attempt $i: SSH not ready yet, waiting..."
        sleep 15
      done
      
      # Create necessary directories
      echo "Creating directories..."
      ssh ubuntu@$PUBLIC_IP "sudo mkdir -p /opt/cold-email/{app,scripts,k8s}"
      
      # Copy files in parallel
      echo "Copying files..."
      scp -r app/* ubuntu@$PUBLIC_IP:/opt/cold-email/app/ &
      scp -r scripts/* ubuntu@$PUBLIC_IP:/opt/cold-email/scripts/ &
      scp -r k8s/* ubuntu@$PUBLIC_IP:/opt/cold-email/k8s/ &
      wait
      
      # Create and copy configuration files
      echo "Creating configuration files..."
      echo "GROQ_API_KEY=$GROQ_API_KEY" | ssh ubuntu@$PUBLIC_IP "sudo tee /opt/cold-email/app/.env"
      
      # Make scripts executable
      echo "Making scripts executable..."
      ssh ubuntu@$PUBLIC_IP "sudo chmod +x /opt/cold-email/scripts/*.sh"
      
      # Run setup script
      echo "Running setup script..."
      ssh ubuntu@$PUBLIC_IP "cd /opt/cold-email && sudo ./scripts/setup-k8s.sh"
      
      # Finalize deployment
      echo "Finalizing deployment..."
      ssh ubuntu@$PUBLIC_IP "cd /opt/cold-email && sudo ./scripts/deploy-k8s.sh"
      
      echo "Deployment completed successfully!"
  artifacts:
    reports:
      dotenv: lb_dns.env
    expire_in: 1 week
  when: on_success

monitor:
  stage: monitor
  image: python:3.9-slim
  script: |
    # Install required packages and setup in parallel
    apt-get update && apt-get install -y openssh-client python3-pip xxd &
    pip install awscli &
    mkdir -p ~/.ssh && chmod 700 ~/.ssh &
    wait
    
    chmod 600 ~/.ssh/id_rsa
    eval $(ssh-agent -s)
    # Debug SSH key format and try multiple formats
    echo "First few characters of SSH key (for debugging format):" && echo "$AWS_SSH_KEY" | head -c 10 | xxd -p
    if echo "$AWS_SSH_KEY" | grep -q "OPENSSH PRIVATE KEY"; then
      echo "OpenSSH format detected"
      echo "$AWS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    elif echo "$AWS_SSH_KEY" | grep -q "BEGIN RSA PRIVATE KEY"; then
      echo "PEM format detected"
      echo "$AWS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    else
      echo "Unknown key format, trying base64 decode..."
      echo "$AWS_SSH_KEY" | base64 -d | tr -d '\r' > ~/.ssh/id_rsa
    fi
    ssh-add ~/.ssh/id_rsa
    echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    
    # Setup AWS credentials
    export AWS_DEFAULT_REGION=us-east-1
    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    
    # Get instance IP with better error handling
    echo "Searching for EC2 instance..."
    INSTANCE_INFO=$(aws ec2 describe-instances \
      --filters "Name=tag:Name,Values=cold-email-instance" "Name=instance-state-name,Values=running" \
      --query "Reservations[*].Instances[*].[InstanceId,PublicIpAddress]" \
      --output text)
    
    EC2_IP=$(echo "$INSTANCE_INFO" | awk '{print $2}')
    
    if [ -z "$EC2_IP" ]; then
      echo "Failed to get EC2 instance IP. Instance info:"
      echo "$INSTANCE_INFO"
      exit 1
    fi
    
    echo "Found EC2 instance with IP: $EC2_IP"
    
    # Define SSH command function with retries
    run_ssh_command() {
      local command="$1"
      for i in {1..3}; do
        echo "Attempt $i: Running command via SSH..."
        if ssh -o ConnectTimeout=5 ${AWS_USER}@${EC2_IP} "$command"; then
          echo "Command executed successfully!"
          return 0
        fi
        echo "Command failed. Waiting 10 seconds before retry..."
        sleep 10
      done
      echo "Failed to execute command after 3 attempts."
      return 1
    }
    
    # Run health checks in parallel
    run_ssh_command "kubectl get pods -n cold-email" &
    run_ssh_command "kubectl get svc -n cold-email" &
    wait
    
    # Check application health
    sleep 15
    curl -s -f -m 5 "http://${EC2_IP}/_stcore/health" || echo "Health check failed"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
  artifacts:
    reports:
      dotenv: lb_dns.env
    expire_in: 1 week