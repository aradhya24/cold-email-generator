image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  AWS_EC2_IP: ${AWS_EC2_IP}
  AWS_SSH_KEY: ${AWS_SSH_KEY}
  AWS_USER: ${AWS_USER}
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE: ${CI_REGISTRY}/aradhya24/cold-email-generator:${CI_COMMIT_SHA}

stages:
  - validate
  - lint
  - test
  - build
  - deploy
  - monitor

validate:
  image: python:3.9-slim
  stage: validate
  script:
    - apt-get update && apt-get install -y python3-pip
    - pip install -r requirements.txt
    - echo "Validating project structure..."
    - python -c "import app.main" || echo "Validation failed but continuing"

lint:
  image: python:3.9-slim
  stage: lint
  before_script:
    - apt-get update && apt-get install -y python3-pip
    - pip install flake8 black isort
  script:
    - flake8 app/ --config=setup.cfg || true
    - black --check app/ || true
    - isort --check-only app/ || true

test:
  image: python:3.9-slim
  stage: test
  before_script:
    - apt-get update && apt-get install -y python3-pip
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - mkdir -p tests && touch tests/__init__.py
    - pytest -xvs tests/ || echo "Tests failed but continuing"

build:
  stage: build
  script: 
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY 
    - docker build --pull -t $DOCKER_IMAGE .
    - docker tag $DOCKER_IMAGE $CI_REGISTRY/aradhya24/cold-email-generator:latest
    - docker push $DOCKER_IMAGE 
    - docker push $CI_REGISTRY/aradhya24/cold-email-generator:latest

setup_k8s:
  stage: deploy
  image: python:3.9-slim
  only:
    - main
  when: manual
  script:
    - apt-get update && apt-get install -y openssh-client gettext-base
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$AWS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh ${AWS_USER}@${AWS_EC2_IP} "mkdir -p ~/k8s ~/scripts"
    - scp -r k8s/* ${AWS_USER}@${AWS_EC2_IP}:~/k8s/
    - scp scripts/setup-k8s.sh ${AWS_USER}@${AWS_EC2_IP}:~/scripts/
    - ssh ${AWS_USER}@${AWS_EC2_IP} "chmod +x ~/scripts/setup-k8s.sh"
    - ssh ${AWS_USER}@${AWS_EC2_IP} "export GROQ_API_KEY=${GROQ_API_KEY} && ~/scripts/setup-k8s.sh"

deploy:
  stage: deploy
  image: python:3.9-slim
  only:
    - main
  script:
    - apt-get update && apt-get install -y openssh-client gettext-base
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$AWS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - envsubst < k8s/deployment.yaml > deployment.yaml
    - scp deployment.yaml ${AWS_USER}@${AWS_EC2_IP}:~/k8s/deployment.yaml
    - scp scripts/deploy-k8s.sh ${AWS_USER}@${AWS_EC2_IP}:~/scripts/
    - ssh ${AWS_USER}@${AWS_EC2_IP} "chmod +x ~/scripts/deploy-k8s.sh"
    - ssh ${AWS_USER}@${AWS_EC2_IP} "export CI_REGISTRY=${CI_REGISTRY} && export CI_COMMIT_SHA=${CI_COMMIT_SHA} && ~/scripts/deploy-k8s.sh"

monitor:
  stage: monitor
  image: python:3.9-slim
  only:
    - main
  script:
    - apt-get update && apt-get install -y openssh-client curl
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$AWS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh ${AWS_USER}@${AWS_EC2_IP} "kubectl get pods -n cold-email"
    - ssh ${AWS_USER}@${AWS_EC2_IP} "kubectl get svc -n cold-email"
    - echo "Checking application health..."
    - ssh ${AWS_USER}@${AWS_EC2_IP} "curl -s http://localhost:8501/_stcore/health || echo 'Health check failed'"