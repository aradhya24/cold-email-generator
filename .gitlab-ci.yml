image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  AWS_EC2_IP: ${AWS_EC2_IP}
  AWS_SSH_KEY: ${AWS_SSH_KEY}
  AWS_USER: ${AWS_USER}
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

stages:
  - test
  - build
  - deploy

# Cache pip packages between jobs
cache:
  paths:
    - .cache/pip
    - venv/

# Run tests
test:
  image: python:3.9-slim
  stage: test
  before_script:
    - apt-get update && apt-get install -y python3-pip python3-venv
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - pip install pytest pytest-cov flake8
  script:
    - flake8 app/
    - pytest --cov=app tests/ --cov-report=xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# Build Docker image
build:
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
  only:
    - main

# Deploy to AWS EC2
deploy:
  stage: deploy
  image: python:3.9-slim
  only:
    - main
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$AWS_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    # Copy docker-compose and environment files
    - ssh ${AWS_USER}@${AWS_EC2_IP} "mkdir -p ~/app"
    - scp docker-compose.yml ${AWS_USER}@${AWS_EC2_IP}:~/app/
    - scp .env ${AWS_USER}@${AWS_EC2_IP}:~/app/ || true
    # Setup Docker on EC2 if not already installed
    - |
      ssh ${AWS_USER}@${AWS_EC2_IP} "
        if ! command -v docker &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose
          sudo usermod -aG docker $USER
        fi
      "
    # Login to registry and deploy
    - |
      ssh ${AWS_USER}@${AWS_EC2_IP} "cd ~/app && 
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        docker-compose pull &&
        docker-compose up -d --force-recreate" 