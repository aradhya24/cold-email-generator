image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE: ${CI_REGISTRY}/aradhya24/cold-email-generator:${CI_COMMIT_SHA}
  AWS_USER: ubuntu
  LB_DNS: ${LB_DNS}

stages:
  - validate
  - build
  - deploy_setup
  - deploy
  - monitor

validate:
  image: python:3.9-slim
  stage: validate
  script:
    - apt-get update && apt-get install -y python3-pip
    - pip install -r requirements.txt
    - echo "Validating project structure..."
    - python -c "import app.main" || { echo "Validation failed, exiting."; exit 1; }

build:
  stage: build
  script: 
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY 
    - docker build --pull -t $DOCKER_IMAGE .
    - docker tag $DOCKER_IMAGE $CI_REGISTRY/aradhya24/cold-email-generator:latest
    - docker push $DOCKER_IMAGE 
    - docker push $CI_REGISTRY/aradhya24/cold-email-generator:latest

deploy_setup:
  stage: deploy_setup
  image: python:3.9-slim
  script:
    - apt-get update && apt-get install -y openssh-client awscli
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$AWS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod +x scripts/get_healthy_instance.sh
    - EC2_IP=$(./scripts/get_healthy_instance.sh)
    - echo "Using EC2 instance with IP $EC2_IP for deployment"
    - ssh ${AWS_USER}@${EC2_IP} "mkdir -p ~/k8s ~/scripts"
    - scp -r k8s/* ${AWS_USER}@${EC2_IP}:~/k8s/
    - scp scripts/setup-k8s.sh ${AWS_USER}@${EC2_IP}:~/scripts/
    - ssh ${AWS_USER}@${EC2_IP} "chmod +x ~/scripts/setup-k8s.sh"
    - ssh ${AWS_USER}@${EC2_IP} "export GROQ_API_KEY=${GROQ_API_KEY} && ~/scripts/setup-k8s.sh"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy:
  stage: deploy
  image: python:3.9-slim
  script:
    - apt-get update && apt-get install -y curl unzip jq awscli openssh-client gettext-base
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$AWS_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - EC2_IP=$(./scripts/get_healthy_instance.sh)
    - echo "Deploying to instance $EC2_IP"
    - for i in {1..5}; do ssh ${AWS_USER}@${EC2_IP} "echo SSH successful" && break || sleep 10; done
    - ssh ${AWS_USER}@${EC2_IP} "kubectl create namespace cold-email --dry-run=client -o yaml | kubectl apply -f -"
    - scp -r k8s/* ${AWS_USER}@${EC2_IP}:~/k8s/
    - ssh ${AWS_USER}@${EC2_IP} "kubectl apply -f ~/k8s/deployment.yaml"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

monitor:
  stage: monitor
  image: python:3.9-slim
  script:
    - apt-get update && apt-get install -y curl awscli
    - echo "Waiting for application to be available..."
    - sleep 60
    - for i in {1..5}; do curl -s -f -m 10 "http://${LB_DNS}/_stcore/health" && break || sleep 10; done
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
