name: Deploy Cold Email Generator

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/cold-email:${{ github.sha }}
  DOCKER_IMAGE_LATEST: ghcr.io/${{ github.repository_owner }}/cold-email:latest
  AWS_USER: ubuntu
  APP_NAME: cold-email
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  validate:
    name: Validate Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate project structure
        run: |
          echo "Validating project structure..."
          python -c "import app.main" || echo "Validation failed but continuing"

  build:
    name: Build and Push Docker Image
    needs: validate
    runs-on: ubuntu-latest
    # Add permissions for packages
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}
            ${{ env.DOCKER_IMAGE_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  infra-setup:
    name: AWS Infrastructure Setup
    needs: build
    runs-on: ubuntu-latest
    environment: production
    # Make this step manual to avoid unexpected infrastructure changes
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      
      - name: Set up AWS infrastructure
        run: |
          chmod +x deploy/aws-k8s/aws-infrastructure.sh
          cd deploy/aws-k8s
          ./aws-infrastructure.sh
      
      - name: Find healthy EC2 instance
        run: |
          chmod +x deploy/aws-k8s/get-healthy-instance.sh
          EC2_IP=$(./deploy/aws-k8s/get-healthy-instance.sh)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "Using EC2 instance with IP $EC2_IP for deployment"
      
      - name: Set up Kubernetes
        run: |
          scp deploy/aws-k8s/k8s-setup.sh ${AWS_USER}@${EC2_IP}:~/
          scp deploy/aws-k8s/k8s-deploy.sh ${AWS_USER}@${EC2_IP}:~/
          ssh ${AWS_USER}@${EC2_IP} "chmod +x ~/k8s-setup.sh ~/k8s-deploy.sh"
          ssh ${AWS_USER}@${EC2_IP} "export GROQ_API_KEY='${{ secrets.GROQ_API_KEY }}' && ~/k8s-setup.sh"
          echo "Kubernetes setup completed"

  deploy:
    name: Deploy Application
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      
      - name: Find healthy EC2 instance
        run: |
          chmod +x deploy/aws-k8s/get-healthy-instance.sh
          EC2_IP=$(./deploy/aws-k8s/get-healthy-instance.sh)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "Using EC2 instance with IP $EC2_IP for deployment"
      
      - name: Get load balancer DNS
        run: |
          LB_DNS=$(aws elbv2 describe-load-balancers \
            --names ${APP_NAME}-lb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "LB_DNS=$LB_DNS" >> $GITHUB_ENV
          echo "Load balancer DNS: $LB_DNS"
      
      - name: Deploy application
        run: |
          echo "Deploying application to Kubernetes..."
          ssh ${AWS_USER}@${EC2_IP} "export DOCKER_IMAGE=${DOCKER_IMAGE} && export LB_DNS=${LB_DNS} && ~/k8s-deploy.sh"
          echo "Application deployed successfully"

  monitor:
    name: Monitor Deployment
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      
      - name: Find healthy EC2 instance
        run: |
          chmod +x deploy/aws-k8s/get-healthy-instance.sh
          EC2_IP=$(./deploy/aws-k8s/get-healthy-instance.sh)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "Using EC2 instance with IP $EC2_IP for deployment"
      
      - name: Check Kubernetes deployment status
        run: |
          ssh ${AWS_USER}@${EC2_IP} "kubectl get pods -n cold-email"
          ssh ${AWS_USER}@${EC2_IP} "kubectl get svc -n cold-email"
      
      - name: Get load balancer DNS
        run: |
          LB_DNS=$(aws elbv2 describe-load-balancers \
            --names ${APP_NAME}-lb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "LB_DNS=$LB_DNS" >> $GITHUB_ENV
          echo "Load balancer DNS: $LB_DNS"
      
      - name: Check application health
        run: |
          echo "Checking application health at http://${LB_DNS}/_stcore/health"
          sleep 60  # Wait for application to be fully available
          curl -s -f -m 10 "http://${LB_DNS}/_stcore/health" || echo "Health check failed, application may need more time to become available"
          echo "Application is accessible at: http://${LB_DNS}" 